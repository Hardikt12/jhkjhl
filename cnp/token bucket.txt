import time

class TokenBucket:
    def __init__(self, max_tokens, tokens_per_sec):
        self.max_tokens = max_tokens
        self.tokens_per_sec = tokens_per_sec
        self.tokens_available = max_tokens
        self.last_refill_time = time.time()

    def _refill_tokens(self):
        current_time = time.time()
        time_elapsed = current_time - self.last_refill_time
        tokens_to_add = int(time_elapsed * self.tokens_per_sec)
        self.tokens_available = min(self.max_tokens, self.tokens_available + tokens_to_add)
        self.last_refill_time = current_time
        print(f"Tokens refilled: {tokens_to_add} tokens added")

    def request(self, requested_tokens):
        self._refill_tokens()
        if requested_tokens <= self.tokens_available:
            self.tokens_available -= requested_tokens
            print(f"Request granted: {requested_tokens} tokens")
            return True
        else:
            print("Request denied: Insufficient tokens")
            return False

bucket = TokenBucket(max_tokens=10, tokens_per_sec=1)

for i in range(1, 6):
    print(f"Query {i}:")
    if bucket.request(3):
        print("Processing...")
    time.sleep(1)
